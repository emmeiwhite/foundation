// We must make this component a container to be connected with the redux 
// We will use: 1.connect() 2.mSTP and let's see what we will use

import React,{Component} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import listClickActionCreator from './../actions/index.js'; //action creator

class BookList extends Component{
    renderBookList(){
        console.log(this.props);
        return this.props.bookProp.map((book)=>{
            // Again returning the JSX
            return(
                <li 
                  key={book.title}
                  onClick={()=>this.props.sb(book)} // Now the action creator will get called and the action will be dispatched to our ActveBook reducer
                  className="list-group-item">
                  {book.title}
                </li>
            )
        })
    }

    // Let's assume that the boollist array is available here from store this.props.bookProp, we'll simply need to show them here
    render(){
            return(
            <ul className="list-group col-md-4">
                    {this.renderBookList()}
            </ul>
        )   

    }
}

// Here we are getting the Application state object and using theh piece of state we require from there
function mapStateToProps(state){
    return{
        bookProp:state.books
    }
    
}

// To make sure our action generated by our action creator reaches all the reducers we make use of our mapDispatchToProps
// Also we first imported our action creator and passed as the value to a key sb in bindActionCreators so that our action is available as props in our container
 function mapDispatchToProps(dispatch){
    return bindActionCreators({sb:listClickActionCreator},dispatch);
}

export default connect(mapStateToProps,mapDispatchToProps)(BookList);

